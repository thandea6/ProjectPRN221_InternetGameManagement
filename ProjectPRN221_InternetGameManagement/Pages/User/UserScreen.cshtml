@page
@using Microsoft.AspNetCore.Antiforgery
@model ProjectPRN221_InternetGameManagement.Pages.User.UserScreenModel
@inject IAntiforgery Antiforgery
@{
    ViewData["Title"] = "User Page";
    var antiforgeryToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Screen</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            margin: 0;
            background-color: #f4f4f4;
        }

        .countdown {
            font-size: 3em;
            font-weight: bold;
            color: #333;
        }

        .top-right {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .button {
            padding: 10px 20px;
            font-size: 1em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            color: white;
        }

        .logout-button {
            background-color: #f44336;
        }

        .buy-button {
            background-color: #4CAF50;
        }
    </style>
</head>
<body>
    <div class="top-right">
        <button class="button buy-button" onclick="location.href='@Url.Page("/Product/Buy")'">Buy</button>
        <button class="button logout-button" onclick="logout()">Logout</button>
    </div>

    <div class="countdown" id="countdown">@Model.RemainingTime</div>

    <script>
        const userId = @HttpContext.Session.GetInt32("UserId");  // Lấy UserId từ Session
        let remainingTime = @Model.RemainingMinutes * 60; // Thời gian còn lại tính bằng giây

        // Tạo kết nối SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SignalRServer")  // Đổi thành URL Hub SignalR của bạn
            .build();

        // Hàm để cập nhật thời gian trên server thông qua SignalR
        function updateTimeOnServer(time) {
            connection.invoke("UpdateRemainingTime", userId, time)
                .catch(err => console.error("Error while sending time to server: ", err));
        }

        // Hàm cập nhật thời gian đếm ngược trên client
        function updateCountdown() {
            if (remainingTime <= 0) {
                document.getElementById('countdown').textContent = "00h00m00s";
                updateTimeOnServer(0); // Gửi thời gian còn lại bằng 0 khi hết giờ
                return;
            }

            remainingTime--;

            const hours = Math.floor(remainingTime / 3600);
            const minutes = Math.floor((remainingTime % 3600) / 60);
            const seconds = remainingTime % 60;

            document.getElementById('countdown').textContent = `${String(hours).padStart(2, '0')}h${String(minutes).padStart(2, '0')}m${String(seconds).padStart(2, '0')}s`;

            // Gửi thời gian mỗi giây lên server để đồng bộ
            updateTimeOnServer(remainingTime);

            setTimeout(updateCountdown, 1000);
        }

        // Bắt đầu đếm ngược khi trang tải xong
        connection.start().then(() => {
            console.log("SignalR connection established.");
            setTimeout(updateCountdown, 1000);  // Bắt đầu đếm ngược
        }).catch(err => {
            console.error("Error while starting SignalR connection: ", err);
        });

        function logout() {
            const remainingMinutes = Math.ceil(remainingTime / 60);
            updateTimeOnServer(remainingMinutes); // Lưu thời gian trước khi đăng xuất
            location.href = '@Url.Page("/Login")';
        }
    </script>

        @* <script>
            const userId = @HttpContext.Session.GetInt32("UserId");  // Lấy UserId từ Session
            let remainingTime = @Model.RemainingMinutes * 60; // Thời gian còn lại tính bằng giây

            // Tạo kết nối SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/gameHub")  // URL SignalR Hub
                .build();

            // Hàm để cập nhật thời gian trên server thông qua SignalR
            async function updateTimeOnServer(time) {
                try {
                    // Gọi SignalR Hub để cập nhật thời gian còn lại trên server
                    await connection.invoke("UpdateRemainingTime", userId, time);
                } catch (err) {
                    console.error("Error while sending time to server: ", err);
                }
            }

            // Hàm đếm ngược thời gian
            function updateCountdown() {
                if (remainingTime <= 0) {
                    document.getElementById('countdown').textContent = "00h00m00s";
                    updateTimeOnServer(0);  // Cập nhật thời gian lên server khi hết giờ
                    return;
                }

                remainingTime--;

                const hours = Math.floor(remainingTime / 3600);
                const minutes = Math.floor((remainingTime % 3600) / 60);
                const seconds = remainingTime % 60;

                document.getElementById('countdown').textContent = `${String(hours).padStart(2, '0')}h${String(minutes).padStart(2, '0')}m${String(seconds).padStart(2, '0')}s`;

                setTimeout(updateCountdown, 1000);

                // Cập nhật thời gian lên server mỗi 10 giây (hoặc tuỳ theo nhu cầu)
                if (remainingTime % 10 === 0) {
                    updateTimeOnServer(remainingTime / 60);  // Cập nhật thời gian còn lại (tính bằng phút)
                }
            }

            // Bắt đầu đếm ngược
            setTimeout(updateCountdown, 1000);

            // Kết nối SignalR khi trang được tải
            connection.start().catch(function (err) {
                return console.error(err.toString());
            });

        function logout() {
            const remainingMinutes = Math.ceil(remainingTime / 60);
            updateTimeOnServer(remainingMinutes); // Lưu thời gian trước khi đăng xuất
            location.href = '@Url.Page("/Login")';
        }
        </script> *@
</body>
</html>
