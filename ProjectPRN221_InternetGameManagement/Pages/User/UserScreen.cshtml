@page
@using Microsoft.AspNetCore.Antiforgery
@model ProjectPRN221_InternetGameManagement.Pages.User.UserScreenModel
@inject IAntiforgery Antiforgery
@{
    ViewData["Title"] = "User Page";
    var antiforgeryToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Screen</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            margin: 0;
            background-color: #f4f4f4;
        }

        .countdown {
            font-size: 3em;
            font-weight: bold;
            color: #333;
        }

        .top-right {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .button {
            padding: 10px 20px;
            font-size: 1em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            color: white;
        }

        .logout-button {
            background-color: #f44336;
        }

        .buy-button {
            background-color: #4CAF50;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 600px;
            margin-top: 20px;
        }
        .chat-input {
            display: flex;
            width: 100%;
            margin-bottom: 10px;
        }

        #messageInput {
            flex: 1;
            padding: 10px;
            font-size: 1em;
            border: 1px solid #ccc;
            border-radius: 5px 0 0 5px;
            outline: none;
        }
        .send-button {
            padding: 10px 20px;
            font-size: 1em;
            border: none;
            border-radius: 0 5px 5px 0;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            transition: background-color 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="top-right">
        <button class="button buy-button" onclick="location.href='@Url.Page("/Product/Buy")'">Buy</button>
        <button class="button logout-button" onclick="logout()">Logout</button>
    </div>
    <div class="chat-container">
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Message" />
            <button class="send-button" onclick="sendMessage()">Send</button>
        </div>
        <ul id="messagesList"></ul>
        <div id="confirmationMessage" style="display: none; color: green; margin-top: 10px;">Message sent!</div>
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SignalRServer")
            .build();

        connection.on("ReceiveMessage", (user, message) => {
            const li = document.createElement("li");
            li.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(li);
        });

        connection.start().catch(err => console.error(err.toString()));

        function sendMessage() {
            const message = document.getElementById("messageInput").value;
            connection.invoke("SendMessageToAdmin", message)
                .then(() => {
                    // Show confirmation message
                    const confirmationMessage = document.getElementById("confirmationMessage");
                    confirmationMessage.style.display = "block";
                    // Hide the confirmation message after 3 seconds
                    setTimeout(() => {
                        confirmationMessage.style.display = "none";
                    }, 3000);
                })
                .catch(err => console.error(err.toString()));
        }
    </script>
    <div class="countdown" id="countdown">@Model.RemainingTime</div>

    <script>
        const userId = @HttpContext.Session.GetInt32("UserId");
        let remainingTime = @Model.RemainingMinutes * 60; // Thời gian còn lại tính bằng giây
        let intervalId;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SignalRServer")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        // Cập nhật thời gian còn lại định kỳ vào cơ sở dữ liệu (mỗi 5 giây)
        setInterval(() => {
            const minutes = Math.floor(remainingTime / 60);
            updateTimeOnServer(minutes);
        }, 5000);

        function updateCountdown() {
            if (remainingTime <= 0) {
                document.getElementById('countdown').textContent = "00h00m00s";
                clearInterval(intervalId);
                updateTimeOnServer(0); // Lưu giá trị 0 vào cơ sở dữ liệu
                return;
            }

            remainingTime--;

            const hours = Math.floor(remainingTime / 3600);
            const minutes = Math.floor((remainingTime % 3600) / 60);
            const seconds = remainingTime % 60;

            document.getElementById('countdown').textContent = `${String(hours).padStart(2, '0')}h${String(minutes).padStart(2, '0')}m${String(seconds).padStart(2, '0')}s`;

            // Gửi thời gian đếm ngược đến SignalR hub
            connection.invoke("UpdateTimer", userId, Math.floor(remainingTime / 60))
                .catch(err => console.error(err.toString()));
        }

        function updateTimeOnServer(remainingMinutes) {
            // Chỉ gửi nếu remainingMinutes lớn hơn 0
            if (remainingMinutes > 0) {
                fetch('@Url.Page("/User/UserScreen", "UpdateTime")', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": "@antiforgeryToken"
                    },
                    body: JSON.stringify({ remainingMinutes: remainingMinutes })
                }).then(response => response.json())
                    .then(data => console.log("Server response:", data))
                    .catch(error => console.error("Error updating time on server:", error));
            } else {
                console.warn("Attempted to send invalid remainingMinutes:", remainingMinutes);
            }
        }


        // Bắt đầu đếm ngược
        intervalId = setInterval(updateCountdown, 1000);

        function logout() {
            updateTimeOnServer(Math.floor(remainingTime / 60)); // Lưu thời gian trước khi đăng xuất
            clearInterval(intervalId); // Dừng đếm ngược
            location.href = '@Url.Page("/Login")'; // Chuyển hướng đến trang đăng nhập
        }
    </script>
</body>
</html>